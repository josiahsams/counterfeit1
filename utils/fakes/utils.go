// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/josiahsams/demo1/utils"
)

type Utils struct {
	IncrBy1Stub        func(int) (int, error)
	incrBy1Mutex       sync.RWMutex
	incrBy1ArgsForCall []struct {
		arg1 int
	}
	incrBy1Returns struct {
		result1 int
		result2 error
	}
	incrBy1ReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Utils) IncrBy1(arg1 int) (int, error) {
	fake.incrBy1Mutex.Lock()
	ret, specificReturn := fake.incrBy1ReturnsOnCall[len(fake.incrBy1ArgsForCall)]
	fake.incrBy1ArgsForCall = append(fake.incrBy1ArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.IncrBy1Stub
	fakeReturns := fake.incrBy1Returns
	fake.recordInvocation("IncrBy1", []interface{}{arg1})
	fake.incrBy1Mutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Utils) IncrBy1CallCount() int {
	fake.incrBy1Mutex.RLock()
	defer fake.incrBy1Mutex.RUnlock()
	return len(fake.incrBy1ArgsForCall)
}

func (fake *Utils) IncrBy1Calls(stub func(int) (int, error)) {
	fake.incrBy1Mutex.Lock()
	defer fake.incrBy1Mutex.Unlock()
	fake.IncrBy1Stub = stub
}

func (fake *Utils) IncrBy1ArgsForCall(i int) int {
	fake.incrBy1Mutex.RLock()
	defer fake.incrBy1Mutex.RUnlock()
	argsForCall := fake.incrBy1ArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Utils) IncrBy1Returns(result1 int, result2 error) {
	fake.incrBy1Mutex.Lock()
	defer fake.incrBy1Mutex.Unlock()
	fake.IncrBy1Stub = nil
	fake.incrBy1Returns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *Utils) IncrBy1ReturnsOnCall(i int, result1 int, result2 error) {
	fake.incrBy1Mutex.Lock()
	defer fake.incrBy1Mutex.Unlock()
	fake.IncrBy1Stub = nil
	if fake.incrBy1ReturnsOnCall == nil {
		fake.incrBy1ReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.incrBy1ReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *Utils) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.incrBy1Mutex.RLock()
	defer fake.incrBy1Mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Utils) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ utils.UtilsInterface = new(Utils)
